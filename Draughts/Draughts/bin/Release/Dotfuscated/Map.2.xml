<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE dotfuscatorMap SYSTEM "http://www.preemptive.com/dotfuscator/dtd/dotfuscatorMap_v1.1.dtd">
<dotfuscatorMap version="1.1">
    <header>
        <timestamp>2013-04-16T11:48:54</timestamp>
        <product version="5.0.2500.0" user="Adam Sands" serial="153814-391">Dotfuscator Community Edition</product>
    </header>
    <mapping>
        <module>
            <name>Draughts.exe</name>
            <type>
                <name>Draughts._square</name>
                <methodlist>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(Draughts._square, Draughts._square)</signature>
                        <name>op_Equality</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(Draughts._square, Draughts._square)</signature>
                        <name>op_Inequality</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>col</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>row</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.App</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Main</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_contentLoaded</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.BlackKingStone</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Shapes.Path</signature>
                        <name>crownB</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Shapes.Path</signature>
                        <name>crownG</name>
                        <newname>h</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.BlackStone</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Draughts.DataCommands</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Windows.Input.RoutedUICommand()</signature>
                        <name>get_AddBlack</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Input.RoutedUICommand()</signature>
                        <name>get_AddBlackKing</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Input.RoutedUICommand()</signature>
                        <name>get_AddWhite</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Input.RoutedUICommand()</signature>
                        <name>get_AddWhiteKing</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Input.RoutedUICommand()</signature>
                        <name>get_Delete</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Input.RoutedUICommand</signature>
                        <name>addBlack</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Input.RoutedUICommand</signature>
                        <name>addBlackKing</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Input.RoutedUICommand</signature>
                        <name>addWhite</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Input.RoutedUICommand</signature>
                        <name>addWhiteKing</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Input.RoutedUICommand</signature>
                        <name>delete</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.MainWindow</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32, bool, bool)</signature>
                        <name>AddPiece</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>AllowDraw</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.ExecutedRoutedEventArgs)</signature>
                        <name>black_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseButtonEventArgs)</signature>
                        <name>board_MouseLeftButtonUp</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseButtonEventArgs)</signature>
                        <name>board_MouseRightButtonDown</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseButtonEventArgs)</signature>
                        <name>board_MouseRightButtonUp</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearBoard</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cmdClear_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseEventArgs)</signature>
                        <name>cmdClear_MouseEnter</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseEventArgs)</signature>
                        <name>cmdClear_MouseLeave</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cmdMove_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cmdNewB_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseEventArgs)</signature>
                        <name>cmdNewB_MouseEnter</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseEventArgs)</signature>
                        <name>cmdNewB_MouseLeave</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cmdNewW_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseEventArgs)</signature>
                        <name>cmdNewW_MouseEnter</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.MouseEventArgs)</signature>
                        <name>cmdNewW_MouseLeave</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cmdReturn_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>cmdSetup_Click</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>CreateBoard</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.RoutedEventArgs)</signature>
                        <name>draw_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.ExecutedRoutedEventArgs)</signature>
                        <name>empty_Click</name>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>GameOver</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>GameOverAnimated</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>HighlightSquare</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>InitializeComponent</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.ExecutedRoutedEventArgs)</signature>
                        <name>kingB_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.ExecutedRoutedEventArgs)</signature>
                        <name>kingW_Click</name>
                    </method>
                    <method>
                        <signature>void(System.Windows.Point)</signature>
                        <name>LeftClicked</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>MakeKing</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>MakeKingAnimated</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32, int32)</signature>
                        <name>MarkSquare</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(string)</signature>
                        <name>Message</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32, int32, int32)</signature>
                        <name>MovePiece</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(Snotsoft.Games.Move)</signature>
                        <name>MovePieceAnimated</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>NewGame</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>Draughts._square(bool)</signature>
                        <name>NextFreeSpace</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(System.Windows.SizeChangedInfo)</signature>
                        <name>OnRenderSizeChanged</name>
                    </method>
                    <method>
                        <signature>void(int32&amp;, int32&amp;)</signature>
                        <name>Orientate</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>RemovePiece</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Reset</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>SetChained</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>SetPlayingBlack</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetTurn</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetTurnAnimated</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>SetupMode</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>size_Completed</name>
                    </method>
                    <method>
                        <signature>void(int32, object)</signature>
                        <name>System.Windows.Markup.IComponentConnector.Connect</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>TakePiece</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>TakePieceAnimated</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>TestMode</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>timerGameOver_Tick</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>timerMakeKing_Tick</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>timerMoves_Tick</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>timerSetTurn_Tick</name>
                    </method>
                    <method>
                        <signature>void(object, System.EventArgs)</signature>
                        <name>timerTakePiece_Tick</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>UnHighlightAllSquares</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>UnHighlightSquare</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.ExecutedRoutedEventArgs)</signature>
                        <name>white_Click</name>
                    </method>
                    <method>
                        <signature>void(object, System.ComponentModel.CancelEventArgs)</signature>
                        <name>Window_Closing</name>
                    </method>
                    <method>
                        <signature>void(object, System.Windows.Input.KeyEventArgs)</signature>
                        <name>Window_KeyDown</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>_contentLoaded</name>
                        <newname>a4</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.Animation.ColorAnimation</signature>
                        <name>alpha0</name>
                        <newname>ai</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.Animation.ColorAnimation</signature>
                        <name>alpha1</name>
                        <newname>aj</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>autoPlay</name>
                        <newname>an</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.LinearGradientBrush</signature>
                        <name>blackBrush</name>
                        <newname>p</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.RadialGradientBrush</signature>
                        <name>blueBrush</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Shapes.Rectangle[0...,0...]</signature>
                        <name>BoardSquares</name>
                        <newname>r</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Canvas</signature>
                        <name>canvas</name>
                        <newname>at</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>cmdClear</name>
                        <newname>ax</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>cmdDraw</name>
                        <newname>a0</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>cmdMove</name>
                        <newname>a1</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>cmdNewB</name>
                        <newname>av</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>cmdNewW</name>
                        <newname>aw</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>cmdReturn</name>
                        <newname>a3</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Button</signature>
                        <name>cmdSetup</name>
                        <newname>ay</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.ContextMenu</signature>
                        <name>context1</name>
                        <newname>ah</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>enforcePlayerOnly</name>
                        <newname>am</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>firstMove</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fromCol</name>
                        <newname>w</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fromRow</name>
                        <newname>x</newname>
                    </field>
                    <field>
                        <signature>Snotsoft.Games.Game</signature>
                        <name>game</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Shapes.Rectangle[0...,0...]</signature>
                        <name>GameBoard</name>
                        <newname>s</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>gameInProgress</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.RadialGradientBrush</signature>
                        <name>greenBrush</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Grid</signature>
                        <name>Grid1</name>
                        <newname>ar</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Grid</signature>
                        <name>GridBoard</name>
                        <newname>as</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.RadialGradientBrush</signature>
                        <name>highlightBrush</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>highlighted</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>ignoreWhiteSquares</name>
                        <newname>al</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isBlacksTurn</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isBlackWin</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isChained</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isDraw</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isKinging</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isMoving</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Snotsoft.Games.Move&gt;</signature>
                        <name>kingings</name>
                        <newname>v</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Snotsoft.Games.Move&gt;</signature>
                        <name>moves</name>
                        <newname>u</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>playingBlack</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Shapes.Polygon</signature>
                        <name>polyPlay</name>
                        <newname>a2</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>primed</name>
                        <newname>aq</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.RadialGradientBrush</signature>
                        <name>redBrush</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>setupMode</name>
                        <newname>ap</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.Animation.DoubleAnimation</signature>
                        <name>size</name>
                        <newname>ak</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Draughts.Stone&gt;</signature>
                        <name>stones</name>
                        <newname>t</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>takeCol</name>
                        <newname>af</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>takenBlack</name>
                        <newname>y</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>takenWhite</name>
                        <newname>z</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>takeRow</name>
                        <newname>ag</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>testMode</name>
                        <newname>ao</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Threading.DispatcherTimer</signature>
                        <name>timerGameOver</name>
                        <newname>ae</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Threading.DispatcherTimer</signature>
                        <name>timerMakeKing</name>
                        <newname>ac</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Threading.DispatcherTimer</signature>
                        <name>timerMoves</name>
                        <newname>aa</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Threading.DispatcherTimer</signature>
                        <name>timerSetTurn</name>
                        <newname>ad</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Threading.DispatcherTimer</signature>
                        <name>timerTakePiece</name>
                        <newname>ab</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>txtGameOver</name>
                        <newname>au</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.TextBlock</signature>
                        <name>txtPlaying</name>
                        <newname>az</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Media.LinearGradientBrush</signature>
                        <name>whiteBrush</name>
                        <newname>q</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.Properties.Resources</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>System.Globalization.CultureInfo()</signature>
                        <name>get_Culture</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Resources.ResourceManager()</signature>
                        <name>get_ResourceManager</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Globalization.CultureInfo)</signature>
                        <name>set_Culture</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Globalization.CultureInfo</signature>
                        <name>resourceCulture</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Resources.ResourceManager</signature>
                        <name>resourceMan</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.Properties.Settings</name>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Draughts.Properties.Settings()</signature>
                        <name>get_Default</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>System.Windows.Rect()</signature>
                        <name>get_WindowPosition</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(System.Windows.Rect)</signature>
                        <name>set_WindowPosition</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Draughts.Properties.Settings</signature>
                        <name>defaultInstance</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.Stone</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>col</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Controls.Canvas</signature>
                        <name>disc</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>row</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Shapes.Path</signature>
                        <name>stone</name>
                        <newname>f</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.WhiteKingStone</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>System.Windows.Shapes.Path</signature>
                        <name>crownG</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>System.Windows.Shapes.Path</signature>
                        <name>crownW</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Draughts.WhiteStone</name>
                <methodlist>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Snotsoft.Games.Game</name>
                <newname>a</newname>
                <methodlist>
                    <method>
                        <signature>void(Draughts.MainWindow)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32, bool)</signature>
                        <name>AddBlackPiece</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32, bool, bool)</signature>
                        <name>AddPiece</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32, bool)</signature>
                        <name>AddWhitePiece</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>BlackWins</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearAll</name>
                        <newname>o</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ClearBoard</name>
                        <newname>n</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>ComputeMove</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>EndTurn</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>Execute</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>FillGrid</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetNumBlackPieces</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetNumPieces</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetNumWhitePieces</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>MakeKing</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>MakeNextMove</name>
                        <newname>q</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32, int32, int32)</signature>
                        <name>Move</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(bool)</signature>
                        <name>NewGame</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PlayerCanJump</name>
                        <newname>l</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PlayerCanMove</name>
                        <newname>k</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>RemovePiece</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>SelectBestBlackMoves</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void(System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>SelectBestWhiteMoves</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32)</signature>
                        <name>SetLevel</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>SetupPieces</name>
                        <newname>m</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>ShowMoves</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>TakePiece</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>Test</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>TestSetup</name>
                        <newname>p</newname>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>WhiteWins</name>
                        <newname>a</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>bool</signature>
                        <name>CanMove</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>Snotsoft.Games.Game/Turn</signature>
                        <name>computerTurn</name>
                        <newname>l</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>countdown</name>
                        <newname>o</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>enforceTurn</name>
                        <newname>k</newname>
                    </field>
                    <field>
                        <signature>Snotsoft.Games.Game/Piece[0...,0...]</signature>
                        <name>gameBoard</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>gameInProgress</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;[]</signature>
                        <name>grid</name>
                        <newname>j</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isBlacksTurn</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isChained</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isPlayingBlack</name>
                        <newname>d</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>level</name>
                        <newname>h</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>markedCol</name>
                        <newname>m</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>markedRow</name>
                        <newname>n</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>strata</name>
                        <newname>i</newname>
                    </field>
                    <field>
                        <signature>Draughts.MainWindow</signature>
                        <name>UI</name>
                        <newname>a</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Snotsoft.Games.Game/BlackKing</name>
                <newname>a/b</newname>
                <methodlist>
                    <method>
                        <signature>void(Snotsoft.Games.Game, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetJump</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetSlides</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Jump</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanJump</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanSlide</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Slide</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Snotsoft.Games.Game/BlackPiece</name>
                <newname>a/c</newname>
                <methodlist>
                    <method>
                        <signature>void(Snotsoft.Games.Game, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetJump</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetSlides</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Jump</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanJump</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanSlide</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Slide</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Snotsoft.Games.Game/Piece</name>
                <newname>a/d</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(Snotsoft.Games.Game, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>Snotsoft.Games.Game/Turn(Snotsoft.Games.Game/Turn)</signature>
                        <name>CopyTurn</name>
                        <newname>j</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetJump</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetJumps</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetSlides</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Jump</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>JumpLeftBack</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>JumpLeftFwd</name>
                        <newname>i</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>JumpRightBack</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>JumpRightFwd</name>
                        <newname>h</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanJump</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanSlide</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>void(int32, int32)</signature>
                        <name>SetPos</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Slide</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>SlideLeftBack</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>SlideLeftFwd</name>
                        <newname>d</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>SlideRightBack</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn)</signature>
                        <name>SlideRightFwd</name>
                        <newname>c</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Snotsoft.Games.Game/Piece[0...,0...]</signature>
                        <name>board</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>col</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>Snotsoft.Games.Game</signature>
                        <name>game</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>bool</signature>
                        <name>isBlack</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>row</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Snotsoft.Games.Game/Turn</name>
                <newname>a/f</newname>
                <methodlist>
                    <method>
                        <signature>void()</signature>
                        <name>.cctor</name>
                    </method>
                    <method>
                        <signature>void()</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32, Snotsoft.Games.Game/Piece[0...,0...], int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetRandomNumber</name>
                        <newname>g</newname>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetScore</name>
                        <newname>h</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>Snotsoft.Games.Game/Piece[0...,0...]</signature>
                        <name>board</name>
                        <newname>e</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>col</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>System.Collections.Generic.List`1&lt;Snotsoft.Games.Move&gt;</signature>
                        <name>moves</name>
                        <newname>f</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>parent</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>System.Random</signature>
                        <name>random</name>
                        <newname>g</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>row</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>score</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
            <type>
                <name>Snotsoft.Games.Game/WhiteKing</name>
                <newname>a/a</newname>
                <methodlist>
                    <method>
                        <signature>void(Snotsoft.Games.Game, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetJump</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetSlides</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Jump</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanJump</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanSlide</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Slide</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Snotsoft.Games.Game/WhitePiece</name>
                <newname>a/e</newname>
                <methodlist>
                    <method>
                        <signature>void(Snotsoft.Games.Game, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetJump</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Game/Turn, System.Collections.Generic.List`1&lt;Snotsoft.Games.Game/Turn&gt;)</signature>
                        <name>GetSlides</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Jump</name>
                        <newname>c</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanJump</name>
                        <newname>a</newname>
                    </method>
                    <method>
                        <signature>bool()</signature>
                        <name>PieceCanSlide</name>
                        <newname>b</newname>
                    </method>
                    <method>
                        <signature>bool(int32, int32)</signature>
                        <name>Slide</name>
                        <newname>d</newname>
                    </method>
                </methodlist>
                <fieldlist />
            </type>
            <type>
                <name>Snotsoft.Games.Move</name>
                <newname>b</newname>
                <methodlist>
                    <method>
                        <signature>void(int32, int32, int32, int32)</signature>
                        <name>.ctor</name>
                    </method>
                    <method>
                        <signature>void(int32, int32, int32, int32)</signature>
                        <name>Assign</name>
                        <newname>e</newname>
                    </method>
                    <method>
                        <signature>bool(object)</signature>
                        <name>Equals</name>
                    </method>
                    <method>
                        <signature>int32()</signature>
                        <name>GetHashCode</name>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Move, Snotsoft.Games.Move)</signature>
                        <name>op_Equality</name>
                        <newname>f</newname>
                    </method>
                    <method>
                        <signature>bool(Snotsoft.Games.Move, Snotsoft.Games.Move)</signature>
                        <name>op_Inequality</name>
                        <newname>e</newname>
                    </method>
                </methodlist>
                <fieldlist>
                    <field>
                        <signature>int32</signature>
                        <name>fromCol</name>
                        <newname>a</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>fromRow</name>
                        <newname>b</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>toCol</name>
                        <newname>c</newname>
                    </field>
                    <field>
                        <signature>int32</signature>
                        <name>toRow</name>
                        <newname>d</newname>
                    </field>
                </fieldlist>
            </type>
        </module>
    </mapping>
    <statistics>
        <statisticline>
            <description>Total Classes</description>
            <statistic>19</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods</description>
            <statistic>178</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields</description>
            <statistic>107</statistic>
        </statisticline>
        <statisticline>
            <description>Total Classes Renamed</description>
            <statistic>8</statistic>
            <statistic>42.11 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Methods Renamed</description>
            <statistic>120</statistic>
            <statistic>67.42 %</statistic>
        </statisticline>
        <statisticline>
            <description>Total Fields Renamed</description>
            <statistic>107</statistic>
            <statistic>100.00 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'a'</description>
            <statistic>33</statistic>
            <statistic>18.54 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'b'</description>
            <statistic>17</statistic>
            <statistic>9.55 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'c'</description>
            <statistic>13</statistic>
            <statistic>7.30 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'd'</description>
            <statistic>13</statistic>
            <statistic>7.30 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'e'</description>
            <statistic>12</statistic>
            <statistic>6.74 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'f'</description>
            <statistic>11</statistic>
            <statistic>6.18 %</statistic>
        </statisticline>
        <statisticline>
            <description>Methods Renamed to 'g'</description>
            <statistic>6</statistic>
            <statistic>3.37 %</statistic>
        </statisticline>
    </statistics>
</dotfuscatorMap>